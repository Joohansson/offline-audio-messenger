{"version":3,"sources":["Messenger.js","serviceWorker.js","index.js"],"names":["Messenger","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sdk","state","started","received","receivedData","Uint8Array","disabled","decryptDisabled","downloadDisabled","message","payload","sendButtonTxt","payloadChunks","payloadCount","payloadCountMax","maxFileSize","handleFileSelect","bind","assertThisInitialized","handleMessageChange","downloadByteArray","concatTypedArray","require","audioError","window","alert","myArray","chunk_size","index","arrayLength","length","tempArray","myChunk","slice","push","content","document","getElementsByClassName","style","maxHeight","scrollHeight","str","regexp","i","test","charAt","msg","key","getElementById","value","result","setState","SimpleCrypto","encrypt","Math","ceil","evt","stopPropagation","preventDefault","scope","files","dataTransfer","reader","FileReader","onload","theFile","data","uint8","name","size","readAsArrayBuffer","dropEffect","event","body","removeChild","target","fileName","bytes","hex","join","toUpperCase","type","getMimetype","blob","Blob","downloadLink","createElement","download","innerHTML","webkitURL","href","createObjectURL","URL","onclick","destroyClickedElement","display","appendChild","click","signature","_this2","Chirp","onSending","console","log","onSent","onReceiving","onReceived","TextDecoder","decode","then","catch","err","error","includes","_this3","react_default","a","className","onClick","collapse","id","placeholder","onChange","onDragOver","handleDragOver","onDrop","TextEncoder","encode","chunkArray","send","rows","readOnly","decrypted","decrypt","startSDK","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_Messenger_0","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b5efdb3a.chunk.js","sourcesContent":["/* Joohansson 2019 */\nimport React from 'react';\nimport { Chirp } from 'chirpsdk'\nimport SimpleCrypto from \"simple-crypto-js\";\nimport './Messenger.css';\n\nclass Messenger extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.sdk = null\n    this.state = {\n      started: false,\n      received: \"\", //received data as string\n      receivedData: new Uint8Array([]), //received in Uint8Array format\n      disabled: true, //send button disabled\n      decryptDisabled: true, //decrypt button disabled\n      downloadDisabled: true, //download button disabled\n      message: \"\", //messeage to be sent\n      payload: new Uint8Array([]),\n      sendButtonTxt: \"SEND 1/1\" //label of send button\n    }\n    this.payloadChunks = [] //send payload divided into parts\n    this.payloadCount = 0 //current payload\n    this.payloadCountMax = 1 //maxium parts to be sent\n    this.maxFileSize = 5000 //max bytes to be dropped\n\n    //Bindings\n    this.handleFileSelect = this.handleFileSelect.bind(this)\n    this.handleMessageChange = this.handleMessageChange.bind(this)\n    this.downloadByteArray = this.downloadByteArray.bind(this)\n\n    this.concatTypedArray = require('concat-typed-array');\n\n    this.audioError = `Failed to open web audio stream.\n    This may happen if your browser doesn't support Web Audio or have a mic and speaker.`\n  }\n\n  componentDidMount() {\n    //Init stuff here\n    if (!('WebAssembly' in window)) window.alert('WebAssembly is not supported in this browser')\n  }\n\n  /**\n  * Returns an array with arrays of the given size.\n  *\n  * @param myArray {Array} array to split\n  * @param chunk_size {Integer} Size of every group\n  */\n  chunkArray(myArray, chunk_size) {\n    var index = 0;\n    var arrayLength = myArray.length;\n    var tempArray = [];\n\n    for (index = 0; index < arrayLength; index += chunk_size) {\n      var myChunk = myArray.slice(index, index+chunk_size);\n      tempArray.push(myChunk);\n    }\n\n    return tempArray;\n  }\n\n  // Show/hide how-to section\n  collapse() {\n    var content = document.getElementsByClassName(\"collapse-content\")[0];\n    if (content.style.maxHeight){\n      content.style.maxHeight = null;\n    } else {\n      content.style.maxHeight = content.scrollHeight + \"px\";\n    }\n  }\n\n  //Check if all chars in a string is pure hex (not currently used but would cut the payload by 50%)\n  checkIfHex(str) {\n    const regexp = /^[0-9a-fA-F]+$/\n    for (var i = 0; i < str.length; i++) {\n      if (!regexp.test(str.charAt(i)))\n        {\n          return false\n        }\n    }\n    return true\n  }\n\n  //When the message body is changed\n  handleMessageChange(msg) {\n    const key = document.getElementById('psw_input').value\n    const result = document.getElementById('resultTxt').value\n    this.setState({ message: msg })\n\n    if (key !== \"\" && result !== \"\") {\n      this.setState({ decryptDisabled: false })\n    }\n    else {\n      this.setState({ decryptDisabled: true })\n    }\n\n    //Encrypt message if key is given\n    if (key !== \"\" && msg !== \"\") {\n      var simpleCrypto = new SimpleCrypto(key)\n      msg = simpleCrypto.encrypt(msg)\n    }\n\n    //Update the button text based on payload length\n    this.payloadCountMax = Math.ceil(msg.length / 32)\n    if (this.payloadCountMax === 0) {\n      this.payloadCountMax = 1\n    }\n\n    if (msg !== \"\") {\n      this.setState({ disabled: false })\n    }\n    else {\n      this.setState({ disabled: true })\n      this.payloadCountMax = 1\n    }\n\n    this.payloadCount = 0\n    this.setState({\n      sendButtonTxt: \"SEND \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax\n    })\n  }\n\n  //When file is dropped\n  handleFileSelect(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const scope = this\n\n    var files = evt.dataTransfer.files; // fileList object\n\n    var reader = new FileReader();\n    /*\n    reader.onload = function(theFile) {\n      const dataString = reader.result\n      if (dataString !== \"\") {\n        scope.setState({\n          message: dataString,\n          disabled: false\n        })\n        scope.handleMessageChange(dataString)\n      }\n    }\n    */\n\n    reader.onload = function(theFile) {\n      const data = reader.result\n      var uint8 = new Uint8Array(data);\n      if (uint8.length > 0) {\n        scope.setState({\n          message: \"Loaded File: \"+files[0].name,\n          payload: uint8,\n          disabled: false\n        })\n        scope.handleMessageChange(\"Loaded File: \"+files[0].name)\n      }\n    }\n\n    //Read file (only if below max file size)\n    const size = files[0].size\n    if (size <= this.maxFileSize) {\n      //reader.readAsBinaryString(files[0])\n      reader.readAsArrayBuffer(files[0])\n    }\n    else {\n      window.alert(\"Max file size allowed: 5 KB\")\n    }\n  }\n\n  //File drag over drop zone\n  handleDragOver(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n  }\n\n  //For file download link\n  destroyClickedElement(event)\n  {\n    document.body.removeChild(event.target);\n  }\n\n  //Download a file from given filename and byteArray\n  downloadByteArray(fileName, bytes) {\n    //Try get the file type from magic numbers\n    const hex = bytes.join('').toUpperCase()\n    let type = this.getMimetype(hex)\n\n    var blob = new Blob([bytes], {type: type})\n\n    var downloadLink = document.createElement(\"a\")\n    downloadLink.download = fileName\n    downloadLink.innerHTML = \"Download File\"\n    if (window.webkitURL != null)\n    {\n        // Chrome allows the link to be clicked\n        // without actually adding it to the DOM.\n        downloadLink.href = window.webkitURL.createObjectURL(blob)\n    }\n    else\n    {\n        // Firefox requires the link to be added to the DOM\n        // before it can be clicked.\n        downloadLink.href = window.URL.createObjectURL(blob)\n        downloadLink.onclick = this.destroyClickedElement\n        downloadLink.style.display = \"none\"\n        document.body.appendChild(downloadLink)\n    }\n\n    downloadLink.click();\n  }\n\n  //Guess file type\n  getMimetype(signature) {\n    switch (signature) {\n      case '89504E47':\n          return 'image/png'\n      case '47494638':\n          return 'image/gif'\n      case '25504446':\n          return 'application/pdf'\n      case 'FFD8FFDB':\n      case 'FFD8FFE0':\n          return 'image/jpeg'\n      case '504B0304':\n          return 'application/zip'\n      default:\n          return 'text/plain'\n    }\n  }\n\n  //Initialize the Chirp SDK\n  startSDK() {\n    Chirp({\n      key: 'b2c2e7ed5Acebf8842C1f3F5F',\n      onSending: data => {\n        console.log(\"Sending\")\n        this.setState({\n          disabled: true,\n          sendButtonTxt: \"Sending...\"\n        })\n      },\n      onSent: data => {\n        console.log(\"Data sent\")\n        //Check if there is more data to send\n        this.payloadCount++\n        if (this.payloadCount >= this.payloadChunks.length) {\n          this.payloadCount = 0\n        }\n        else {\n          //TODO: automatically send again (Breaks the event listeners for some reason)\n          //this.sendPayload(this.payloadChunks[this.payloadCount]) //example 1\n          //document.getElementById(\"sendButton\").click(); //example 2\n        }\n        this.setState({\n          disabled: false,\n          sendButtonTxt: \"SEND \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax\n        })\n      },\n      onReceiving: () => {\n        console.log(\"Receiving...\")\n        this.payloadCount = 0 //Reset any sending parts\n        this.setState({\n          disabled: true,\n          sendButtonTxt: \"Incoming...\"\n        })\n      },\n      onReceived: data => {\n        console.log(\"Data received\")\n        this.setState({\n          sendButtonTxt: \"SEND \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax\n        })\n        if (data.length > 0) {\n          var result = \"\"\n\n          result = new TextDecoder('utf-8').decode(data)\n\n          this.setState({\n            receivedData: this.concatTypedArray(Uint8Array,this.state.receivedData,data),\n            received: this.state.received+result,\n          })\n\n          //Enable decrypt button\n          const key = document.getElementById('psw_input').value\n          if (key !== \"\") {\n            this.setState({ decryptDisabled: false })\n          }\n          else {\n            this.setState({ decryptDisabled: true })\n          }\n          this.setState({ downloadDisabled: false })\n        }\n        else {\n          alert(\"Missed data. Try increase the volume.\")\n        }\n      }\n    }).then(sdk => {\n      this.sdk = sdk\n      this.setState({ started: true })\n    }).catch(err => console.error(err) && err.message.includes('WebAssembly') ?\n          window.alert(err) : window.alert(this.audioError)\n        )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header><h1>Offline Audio Messenger</h1></header>\n\n        {this.state.started ? (\n          <div>\n            <button onClick={this.collapse} className=\"IntroButton\">HOW TO</button>\n            <div className=\"collapse-content\">\n                <strong>No message data is shared but feel free to download site and use offline.<br /></strong>\n                <ol>\n                    <li>Send message from one device to another using speaker and microphone.</li>\n                    <li>If they are far apart you can use a recorder for example a phone app.</li>\n                    <li>Use optional encryption to avoid anyone to intercept the audio.</li>\n                    <li>Each (non encrypted) part is 32 chars and split automatically.</li>\n                    <li>Use same encryption key on the receiving end.</li>\n                </ol>\n              <br />\n            </div>\n\n            <div className=\"MsgBoxContainer\">\n              <input className=\"MsgBox\"\n                type=\"text\"\n                id=\"message_input\"\n                placeholder=\"Enter message\"\n                value={this.state.message}\n                onChange={(event) => {\n                  this.handleMessageChange(event.target.value)\n                }}\n              />\n\n              <div\n                id=\"drop_zone\"\n                onDragOver={this.handleDragOver}\n                onDrop={this.handleFileSelect}>\n                ...or drop a text file here\n              </div>\n\n              <input className=\"MsgBox\"\n                type=\"text\"\n                id=\"psw_input\"\n                placeholder=\"Encryption key (optional)\"\n                onChange={(event) => {\n                  var msg = document.getElementById('message_input').value\n                  this.handleMessageChange(msg)\n                }}\n              />\n            </div>\n\n            {this.state.disabled ? (\n              <button id=\"sendButton\" className=\"SendButton\" disabled>{this.state.sendButtonTxt}</button>\n              ) : (\n              <button id=\"sendButton\" className=\"SendButton\"\n                onClick={() => {\n                  if (this.payloadCount === 0 || this.payloadCount >= this.payloadChunks.length) {\n                    var message = this.state.message\n                    const key = document.getElementById('psw_input').value\n\n                    var payload = new Uint8Array([\"Unknown\"])\n\n                    //If file imported, send as bytearray directly\n                    if (this.state.payload.length > 0) {\n                      payload = this.state.payload\n                      message = new TextDecoder('utf-8').decode(payload)\n                    }\n                    //Encrypt message if key is given\n                    if (key !== \"\" && message !== \"\") {\n                      var simpleCrypto = new SimpleCrypto(key)\n                      message = simpleCrypto.encrypt(message)\n                    }\n                    if (message !== \"\") {\n                      payload = new TextEncoder('utf-8').encode(message)\n                    }\n\n                    //Divide payload into several 32 byte payloads\n                    this.payloadChunks = this.chunkArray(payload, 32)\n                    this.payloadCountMax = this.payloadChunks.length\n\n                    this.sdk.send(this.payloadChunks[0])\n                  }\n                  else {\n                    this.sdk.send(this.payloadChunks[this.payloadCount])\n                  }\n                }}\n              >{this.state.sendButtonTxt}</button>\n              )\n            }\n\n            <div className=\"received-message\">\n              {<textarea id=\"resultTxt\" className=\"Result\" rows=\"10\" value={this.state.received} placeholder=\"Waiting on message...\" readOnly></textarea>}\n            </div>\n\n            <div>\n              {this.state.decryptDisabled ? (\n                <button id=\"decryptButton\" className=\"DecryptButton\" disabled>DECRYPT</button>\n                ) : (\n                  <button id=\"decryptButton\" className=\"DecryptButton\"\n                    onClick={() => {\n                        //Decrypt message\n                        var result = document.getElementById(\"resultTxt\").value\n                        const key = document.getElementById('psw_input')\n                        var simpleCrypto = new SimpleCrypto(key.value)\n                        var decrypted = simpleCrypto.decrypt(result)\n                        document.getElementById(\"resultTxt\").value = decrypted\n                    }\n                  }\n                >DECRYPT</button>\n                )\n              }\n\n              <button id=\"resetButton\" className=\"ResetButton\"\n                onClick={() => {\n                  //Reset textarea\n                  this.setState({\n                    received: \"\",\n                    receivedData: new Uint8Array([]),\n                    message: \"\",\n                    sendButtonTxt: \"SEND 1/1\",\n                    decryptDisabled: true,\n                    downloadDisabled: true,\n                  })\n                  this.payloadCount = 0\n                  this.payloadCountMax = 1\n                  this.payloadChunks = []\n                  }\n                }\n              >RESET</button>\n\n              {this.state.downloadDisabled ? (\n                <button id=\"downloadButton\" className=\"DownloadButton\" disabled>DOWNLOAD</button>\n                ) : (\n                  <button id=\"downloadButton\" className=\"DownloadButton\"\n                    onClick={() => {\n                      //Download the bytes shown in text textarea\n                      this.downloadByteArray(\"test.txt\", this.state.receivedData)\n                    }\n                  }\n                >DOWNLOAD</button>\n                )\n              }\n            </div>\n          </div>\n          ) : (\n            <button className=\"StartButton\"\n              onClick={() => {\n                this.startSDK()\n              }}\n            >START</button>\n          )\n        }\n        <div className = \"extra\"></div>\n        <footer className=\"Footer\"><span>Offline version can be downloaded at </span><a href=\"https://github.com/Joohansson/offline-audio-messenger\">Github</a></footer>\n      </div>\n    )\n  }\n}\n\nexport default Messenger;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Messenger from './Messenger'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Messenger />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}