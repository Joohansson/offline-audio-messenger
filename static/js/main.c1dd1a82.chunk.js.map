{"version":3,"sources":["Messenger.js","serviceWorker.js","index.js"],"names":["Messenger","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sdk","state","started","received","receivedData","Uint8Array","disabled","decryptDisabled","downloadDisabled","message","payload","sendButtonTxt","nextPart","autoSend","payloadChunks","payloadCount","payloadCountMax","maxFileSize","decryptedResult","handleFileSelect","bind","assertThisInitialized","handleMessageChange","downloadByteArray","tick","handleAutoCheck","concatTypedArray","require","audioError","_this2","window","timerID","setInterval","alert","clearInterval","_this3","setState","length","send","myArray","chunk_size","index","arrayLength","tempArray","myChunk","slice","push","content","document","getElementsByClassName","style","maxHeight","scrollHeight","str","regexp","i","test","charAt","u8Arr","result","subarray","Math","min","String","fromCharCode","apply","btoa","uint8","atob","split","map","c","charCodeAt","error","key","getElementById","value","simpleCrypto","SimpleCrypto","uint8ToBase64","encrypt","TextEncoder","encode","chunkArray","evt","stopPropagation","preventDefault","scope","files","dataTransfer","reader","FileReader","onload","theFile","data","name","size","readAsArrayBuffer","dropEffect","event","body","removeChild","target","e","dataString","TextDecoder","decode","dataTemp","fromBase64","bytes","forEach","byte","toString","hex","join","toUpperCase","fileName","getMimetypeExt","substring","base64","downloadLink","createElement","download","innerHTML","webkitURL","href","onclick","destroyClickedElement","display","appendChild","click","signature","_this4","Chirp","onSending","console","log","onSent","onReceiving","onReceived","combinedData","then","catch","err","includes","_this5","react_default","a","className","onClick","collapse","type","id","placeholder","onChange","onDragOver","handleDragOver","onDrop","checked","rows","readOnly","decrypted","decrypt","startSDK","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_Messenger_0","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c1dd1a82.chunk.js","sourcesContent":["/* Joohansson 2019 */\nimport React from 'react';\nimport { Chirp } from 'chirpsdk'\nimport SimpleCrypto from \"simple-crypto-js\";\nimport './Messenger.css';\n\nclass Messenger extends React.Component {\n  constructor(props) {\n    super(props)\n    this.sdk = null\n    this.state = {\n      started: false,\n      received: \"\", //received data as string\n      receivedData: new Uint8Array([]), //received in Uint8Array format\n      disabled: true, //send button disabled\n      decryptDisabled: true, //decrypt button disabled\n      downloadDisabled: true, //download button disabled\n      message: \"\", //messeage to be sent\n      payload: new Uint8Array([]),\n      sendButtonTxt: \"SEND 1/1\", //label of send button\n      nextPart: false, //if scheduler is allowed to send next part\n      autoSend: true, //if send button is automatic\n    }\n    this.payloadChunks = [] //send payload divided into parts\n    this.payloadCount = 0 //current payload\n    this.payloadCountMax = 1 //maxium parts to be sent\n    this.maxFileSize = 1000000 //max bytes to be dropped\n    this.decryptedResult = new Uint8Array([]) //for downloads\n\n    //Bindings\n    this.handleFileSelect = this.handleFileSelect.bind(this)\n    this.handleMessageChange = this.handleMessageChange.bind(this)\n    this.downloadByteArray = this.downloadByteArray.bind(this)\n    this.tick = this.tick.bind(this)\n    this.handleAutoCheck = this.handleAutoCheck.bind(this)\n\n    this.concatTypedArray = require('concat-typed-array');\n\n    this.audioError = `Failed to open web audio stream.\n    This may happen if your browser doesn't support Web Audio or have a mic and speaker.`\n  }\n\n  componentDidMount() {\n    //Init stuff here\n    if (!('WebAssembly' in window)) {\n      window.alert('WebAssembly is not supported in this browser')\n    }\n    //Start timer for automatic sending\n    else {\n      this.timerID = setInterval(\n      () => this.tick(),\n        100\n      )\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    if (this.state.nextPart) {\n      this.setState({\n        nextPart: false, //disable state to disallow double sending\n      }, () => {\n        //After set state if finished, send next part\n        if (this.payloadCount !== 0 && this.payloadCount < this.payloadChunks.length && this.state.autoSend) {\n          this.sdk.send(this.payloadChunks[this.payloadCount])\n        }\n      })\n    }\n  }\n\n  /**\n  * Returns an array with arrays of the given size.\n  *\n  * @param myArray {Array} array to split\n  * @param chunk_size {Integer} Size of every group\n  */\n  chunkArray(myArray, chunk_size) {\n    var index = 0;\n    var arrayLength = myArray.length;\n    var tempArray = [];\n\n    for (index = 0; index < arrayLength; index += chunk_size) {\n      var myChunk = myArray.slice(index, index+chunk_size);\n      tempArray.push(myChunk);\n    }\n\n    return tempArray;\n  }\n\n  // Show/hide how-to section\n  collapse() {\n    var content = document.getElementsByClassName(\"collapse-content\")[0];\n    if (content.style.maxHeight){\n      content.style.maxHeight = null;\n    } else {\n      content.style.maxHeight = content.scrollHeight + \"px\";\n    }\n  }\n\n  //Check if all chars in a string is pure hex (not currently used but would cut the payload by 50%)\n  checkIfHex(str) {\n    const regexp = /^[0-9a-fA-F]+$/\n    for (var i = 0; i < str.length; i++) {\n      if (!regexp.test(str.charAt(i)))\n        {\n          return false\n        }\n    }\n    return true\n  }\n\n  /*\n  uint8ToBase64(u8) {\n    var base64 = \"\"\n    try {\n      base64 = btoa(String.fromCharCode.apply(null, u8))\n    }\n    catch(error) {\n      console.error(\"Bad data. Could not make base64.\")\n      return \"\"\n    }\n    return base64\n  }\n  */\n\n  uint8ToBase64(u8Arr){\n    var CHUNK_SIZE = 0x8000; //arbitrary number\n    var index = 0;\n    var length = u8Arr.length;\n    var result = '';\n    var slice;\n    while (index < length) {\n      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\n      result += String.fromCharCode.apply(null, slice);\n      index += CHUNK_SIZE;\n    }\n    return btoa(result);\n  }\n\n  fromBase64(str) {\n    var uint8\n    try {\n      uint8 = atob(str).split('').map(function (c) { return c.charCodeAt(0); })\n    }\n    catch(error) {\n      //console.error(\"Bad data. Check received format.\")\n      return new Uint8Array([])\n    }\n    return new Uint8Array(uint8)\n  }\n\n  handleMessageChange(message) {\n    if (message !== this.state.message) {\n      this.setState({message: message})\n    }\n\n    const key = document.getElementById('psw_input').value\n    const result = document.getElementById('resultTxt').value\n\n    if (key.length > 0 && result.length > 0) {\n      this.setState({ decryptDisabled: false })\n    }\n    else {\n      this.setState({ decryptDisabled: true })\n    }\n\n    var payload = new Uint8Array([\"Unknown\"])\n    var simpleCrypto = new SimpleCrypto(key)\n\n    //If file imported, convert to base64 because UTF8 is not enough for non-text files\n    if (this.state.payload.length > 0) {\n      payload = this.state.payload\n      message = this.uint8ToBase64(payload)\n    }\n    //Encrypt message if key is given\n    if (key.length > 0 && message.length > 0) {\n      message = simpleCrypto.encrypt(message)\n    }\n\n    //Valid message\n    if (message.length > 0) {\n      payload = new TextEncoder('utf-8').encode(message)\n      this.setState({ disabled: false })\n\n      //Divide payload into several 32 byte payloads and calculate parts needed\n      this.payloadChunks = this.chunkArray(payload, 32)\n      this.payloadCountMax = this.payloadChunks.length\n      if (this.payloadCountMax === 0) {\n        this.payloadCountMax = 1\n      }\n    }\n    else {\n      this.setState({\n        disabled: true,\n      })\n      this.payloadCountMax = 1\n    }\n\n    this.payloadCount = 0\n    this.setState({\n      sendButtonTxt: \"SEND \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax\n    })\n  }\n\n  //When file is dropped\n  handleFileSelect(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const scope = this\n\n    var files = evt.dataTransfer.files; // fileList object\n\n    var reader = new FileReader();\n\n    reader.onload = function(theFile) {\n      const data = reader.result\n      var uint8 = new Uint8Array(data);\n      if (uint8.length > 0) {\n        scope.setState({\n          payload: uint8,\n          disabled: false\n        }, () => {\n          //After set state if finished\n          scope.handleMessageChange(\"Loaded File: \"+files[0].name)\n        })\n      }\n    }\n\n    //Read file (only if below max file size)\n    const size = files[0].size\n    if (size <= this.maxFileSize) {\n      //reader.readAsBinaryString(files[0])\n      reader.readAsArrayBuffer(files[0])\n    }\n    else {\n      window.alert(\"Max file size allowed: 1 MB\")\n    }\n  }\n\n  //File drag over drop zone\n  handleDragOver(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n  }\n\n  //For file download link\n  destroyClickedElement(event)\n  {\n    document.body.removeChild(event.target);\n  }\n\n  handleAutoCheck(e) {\n    this.setState({\n      autoSend: !this.state.autoSend,\n    });\n  }\n\n  //Download a file from given filename and byteArray\n  downloadByteArray() {\n    var data = this.decryptedResult\n\n    //Try decode base64 string to uint8array (if it fails, then it was not base64 ie not a file but normal text)\n    let dataString = new TextDecoder('utf-8').decode(data)\n    let dataTemp = this.fromBase64(dataString)\n    if (dataTemp.length > 0) {\n      data = dataTemp\n    }\n\n    //Try get the file type from magic numbers\n    let bytes = []\n    data.forEach((byte) => {\n      bytes.push(byte.toString(16))\n    })\n    const hex = bytes.join('').toUpperCase()\n    let ext = this.getMimetypeExt(hex.substring(0,8))\n    let fileName = \"message.\"+ext\n\n    //Back to base64 encoding for file download\n    var base64 = \"QmFkIGRhdGEuIFRyeSB0byBjaGFuZ2UgdGhlIHJlY2VpdmUgZm9ybWF0Lg==\"\n    if (data.length > 0) {\n      base64 = this.uint8ToBase64(data)\n    }\n\n    var downloadLink = document.createElement(\"a\")\n    downloadLink.download = fileName\n    downloadLink.innerHTML = \"Download File\"\n    if (window.webkitURL != null)\n    {\n        // Chrome allows the link to be clicked\n        // without actually adding it to the DOM.\n        //downloadLink.href = window.webkitURL.createObjectURL(blob)\n        downloadLink.href = 'data:application/octet-stream;base64,' + base64\n    }\n    else\n    {\n        // Firefox requires the link to be added to the DOM\n        // before it can be clicked.\n        //downloadLink.href = window.URL.createObjectURL(blob)\n        downloadLink.href = 'data:application/octet-stream;base64,' + base64\n        downloadLink.onclick = this.destroyClickedElement\n        downloadLink.style.display = \"none\"\n        document.body.appendChild(downloadLink)\n    }\n\n    downloadLink.click();\n  }\n\n  //Guess file type\n  getMimetypeExt(signature) {\n    switch (signature) {\n      case '89504E47':\n          return 'png'\n      case '47494638':\n          return 'gif'\n      case '25504446':\n          return 'pdf'\n      case 'FFD8FFDB':\n      case 'FFD8FFE0':\n          return 'jpg'\n      case '49492A00':\n          return 'tif'\n      case '4D4D002A':\n          return 'tif'\n      case '504B0304':\n          return 'zip'\n      case '52617221':\n          return 'rar'\n      case '52494646':\n          return 'wav'\n      case '504D4F43':\n          return 'dat'\n      case '75737461':\n          return 'tar'\n      case '377ABCAF':\n          return '7z'\n      case '000001BA':\n      case '000001B3':\n          return 'mpg'\n      default:\n          return ''\n    }\n  }\n\n  //Initialize the Chirp SDK\n  startSDK() {\n    Chirp({\n      key: 'b2c2e7ed5Acebf8842C1f3F5F',\n      onSending: data => {\n        console.log(\"Sending\")\n        this.setState({\n          disabled: true,\n          sendButtonTxt: \"Sending \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax+\"...\"\n        })\n      },\n      onSent: data => {\n        console.log(\"Data sent\")\n        //Check if there is more data to send\n        this.payloadCount++\n        if (this.payloadCount >= this.payloadChunks.length) {\n          this.payloadCount = 0\n        }\n\n        this.setState({\n          disabled: false,\n          sendButtonTxt: \"SEND \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax\n        })\n\n        this.setState({\n          disabled: false,\n          sendButtonTxt: \"SEND \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax\n        }, () => {\n          //After set state if finished\n          if (this.payloadCount < this.payloadChunks.length) {\n            this.setState({\n              nextPart: true\n            })\n          }\n        })\n      },\n      onReceiving: () => {\n        console.log(\"Receiving...\")\n        this.payloadCount = 0 //Reset any sending parts\n        this.setState({\n          disabled: true,\n          sendButtonTxt: \"Incoming...\"\n        })\n      },\n      onReceived: data => {\n        console.log(\"Data received\")\n        this.setState({\n          sendButtonTxt: \"SEND \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax\n        })\n        if (data.length > 0) {\n          let combinedData = this.concatTypedArray(Uint8Array,this.state.receivedData,data)\n          let result = new TextDecoder('utf-8').decode(data)\n\n          this.setState({\n            receivedData: combinedData,\n            received: this.state.received+result,\n          })\n\n          this.decryptedResult = combinedData //for downloads\n\n          //Enable decrypt button\n          const key = document.getElementById('psw_input').value\n          if (key !== \"\") {\n            this.setState({ decryptDisabled: false })\n          }\n          else {\n            this.setState({ decryptDisabled: true })\n          }\n          this.setState({ downloadDisabled: false })\n        }\n        else {\n          alert(\"Missed data. Try increase the volume.\")\n        }\n      }\n    }).then(sdk => {\n      this.sdk = sdk\n      this.setState({ started: true })\n    }).catch(err => console.error(err) && err.message.includes('WebAssembly') ?\n          window.alert(err) : window.alert(this.audioError)\n        )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header><h1>Offline Audio Messenger</h1></header>\n\n        {this.state.started ? (\n          <div>\n            <button onClick={this.collapse} className=\"IntroButton\">HOW TO</button>\n            <div className=\"collapse-content\">\n                <strong>No message data is shared but feel free to download site and use offline.<br /></strong>\n                <ol>\n                    <li>Message/file is sent from one device to another using speaker and microphone.</li>\n                    <li>Use optional encryption to avoid anyone to intercept the audio.</li>\n                    <li>If they are far apart you can use a recorder for example a phone app.</li>\n                    <li>Each part is 32 chars and split automatically. Encryption is longer.</li>\n                    <li>Decryption needs to be done before downloading.</li>\n                </ol>\n              <br />\n            </div>\n\n            {/* MESSAGE INPUT */}\n            <div className=\"MsgBoxContainer\">\n              <input className=\"MsgBox\"\n                type=\"text\"\n                id=\"message_input\"\n                placeholder=\"Enter message\"\n                value={this.state.message}\n                onChange={(event) => {\n                  if (event.target.value.length === 0) {\n                    //Reset file payload before calculating the rest\n                    this.setState({\n                      payload: new Uint8Array([])\n                    }, () => {\n                      //After set state if finished\n                      this.handleMessageChange(\"\")\n                    })\n                  }\n                  else {\n                    this.handleMessageChange(event.target.value)\n                  }\n                }}\n              />\n\n              {/* FILE DROPZONE */}\n              <div\n                id=\"drop_zone\"\n                onDragOver={this.handleDragOver}\n                onDrop={this.handleFileSelect}>\n                ...or drop a file here\n              </div>\n\n              {/* ENCRYPTION INPUT */}\n              <input className=\"MsgBox\"\n                type=\"text\"\n                id=\"psw_input\"\n                placeholder=\"Encryption key (optional)\"\n                onChange={(event) => {\n                  this.handleMessageChange(this.state.message)\n                }}\n              />\n            </div>\n\n            {/* AUTO TICKER */}\n            <div>\n              <label className=\"AutoSend\">\n                Auto Send\n                <input type=\"checkbox\"\n                  checked={this.state.autoSend}\n                  onChange={(event) => {\n                    this.handleAutoCheck()\n                  }}\n                />\n               </label>\n            </div>\n\n            {/* SEND BUTTON */}\n            {this.state.disabled ? (\n              <button id=\"sendButton\" className=\"SendButton\" disabled>{this.state.sendButtonTxt}</button>\n              ) : (\n              <button id=\"sendButton\" className=\"SendButton\"\n                onClick={() => {\n                  if (this.payloadCount === 0 || this.payloadCount >= this.payloadChunks.length) {\n                    this.sdk.send(this.payloadChunks[0])\n                  }\n                  else {\n                    this.sdk.send(this.payloadChunks[this.payloadCount])\n                  }\n                }}\n              >{this.state.sendButtonTxt}</button>\n              )\n            }\n\n            {/* RETRY BUTTON */}\n            {this.state.disabled ? (\n              <button id=\"retryButton\" className=\"RetryButton\" disabled>RETRY</button>\n              ) : (\n              <button id=\"retryButton\" className=\"RetryButton\"\n                onClick={() => {\n                  if (this.payloadCount > 0) {\n                    this.payloadCount--\n                    this.setState({\n                      sendButtonTxt: \"SEND \"+(this.payloadCount+1)+\"/\"+this.payloadCountMax\n                    })\n                  }\n                }}\n              >RETRY</button>\n              )\n            }\n\n            {/* RESULT AREA */}\n            <div className=\"received-message\">\n              {<textarea id=\"resultTxt\" className=\"Result\" rows=\"10\" value={this.state.received} placeholder=\"Waiting on message...\" readOnly></textarea>}\n            </div>\n\n            {/* DECRYPTION BUTTON */}\n            <div>\n              {this.state.decryptDisabled ? (\n                <button id=\"decryptButton\" className=\"DecryptButton\" disabled>DECRYPT</button>\n                ) : (\n                  <button id=\"decryptButton\" className=\"DecryptButton\"\n                    onClick={() => {\n                        //Decrypt message\n                        //var result = document.getElementById(\"resultTxt\").value\n                        const key = document.getElementById('psw_input')\n                        const result = new TextDecoder('utf-8').decode(this.state.receivedData)\n\n                        var decrypted = \"\"\n                        try {\n                          var simpleCrypto = new SimpleCrypto(key.value)\n                          decrypted = simpleCrypto.decrypt(result)\n                        }\n                        catch(error) {\n                          console.error(\"Could not decrypt data.\")\n                        }\n\n                        if (decrypted.length === 0) {\n                          decrypted = \"Failed to decrypt\"\n                        }\n\n                        //Update the original data (if downloadings)\n                        this.setState({\n                          received: decrypted\n                        })\n                        this.decryptedResult = new TextEncoder('utf-8').encode(decrypted)\n                    }\n                  }\n                >DECRYPT</button>\n                )\n              }\n\n              {/* RESET BUTTON */}\n              <button id=\"resetButton\" className=\"ResetButton\"\n                onClick={() => {\n                  //Reset textarea\n                  this.setState({\n                    received: \"\",\n                    receivedData: new Uint8Array([]),\n                    message: \"\",\n                    payload: new Uint8Array([]),\n                    sendButtonTxt: \"SEND 1/1\",\n                    decryptDisabled: true,\n                    downloadDisabled: true,\n                  })\n                  this.payloadCount = 0\n                  this.payloadCountMax = 1\n                  this.payloadChunks = []\n                  }\n                }\n              >RESET</button>\n\n              {/* DOWNLOAD BUTTON */}\n              {this.state.downloadDisabled ? (\n                <button id=\"downloadButton\" className=\"DownloadButton\" disabled>DOWNLOAD</button>\n                ) : (\n                  <button id=\"downloadButton\" className=\"DownloadButton\"\n                    onClick={() => {\n                      //Download the bytes shown in text textarea\n                      this.downloadByteArray()\n                    }\n                  }\n                >DOWNLOAD</button>\n                )\n              }\n            </div>\n          </div>\n          ) : (\n            <div className=\"Intro\">\n              <p>Send a message or file using encrypted audio. Speaker and Mic required.</p>\n\n              <button className=\"StartButton\"\n                onClick={() => {\n                  this.startSDK()\n                }}\n              >START</button>\n            </div>\n          )\n        }\n        <div className = \"extra\"></div>\n        <footer className=\"Footer\"><span>Offline version can be downloaded at </span><a href=\"https://github.com/Joohansson/offline-audio-messenger\">Github</a></footer>\n      </div>\n    )\n  }\n}\n\nexport default Messenger;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Messenger from './Messenger'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Messenger />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}